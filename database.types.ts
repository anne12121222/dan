// This file is a placeholder for types that would be auto-generated by `supabase gen types typescript`.
// In a real project, you would run that command to get accurate types from your database schema.
// This schema assumes you have tables like `profiles`, `fights`, `bets`, etc.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string // Corresponds to auth.users.id (UUID)
          name: string
          role: string // UserRole enum
          agent_id: string | null // FK to profiles.id
          master_agent_id: string | null // FK to profiles.id
          coin_balance: number
          commission_balance: number
          email: string
        }
        Insert: {
          id: string
          name: string
          role: string
          agent_id?: string | null
          master_agent_id?: string | null
          coin_balance?: number
          commission_balance?: number
          email: string
        }
        Update: {
          id?: string
          name?: string
          role?: string
          agent_id?: string | null
          master_agent_id?: string | null
          coin_balance?: number
          commission_balance?: number
          email?: string
        }
        // FIX: Added missing Relationships property to ensure proper type inference.
        Relationships: []
      }
      fights: {
        Row: {
          id: number
          status: string // FightStatus enum
          winner: 'RED' | 'WHITE' | 'DRAW' | 'CANCELLED' | null;
          participants: Json
          commission: number
          created_at: string
        }
        Insert: {
          id?: number
          status: string
          winner?: 'RED' | 'WHITE' | 'DRAW' | 'CANCELLED' | null;
          participants: Json
          commission?: number
        }
        Update: {
          status?: string
          winner?: 'RED' | 'WHITE' | 'DRAW' | 'CANCELLED' | null;
          commission?: number
        }
        // FIX: Added missing Relationships property to ensure proper type inference.
        Relationships: []
      }
      upcoming_fights: {
        Row: {
          id: number
          participants: Json
        }
        Insert: {
          id?: number
          participants: Json
        }
        // FIX: Added missing Update property
        Update: {
          id?: number
          participants?: Json
        }
        // FIX: Added missing Relationships property to ensure proper type inference.
        Relationships: []
      }
      bets: {
        Row: {
          id: number
          user_id: string
          fight_id: number
          choice: string
          amount: number
          created_at: string
        }
        Insert: {
          user_id: string
          fight_id: number
          choice: string
          amount: number
        }
        // FIX: Added missing Update property
        Update: {
          user_id?: string
          fight_id?: number
          choice?: string
          amount?: number
        }
        // FIX: Added missing Relationships property to ensure proper type inference.
        Relationships: []
      }
      messages: {
        Row: {
            id: number
            sender_id: string
            receiver_id: string
            text: string
            created_at: string
        }
        Insert: {
            sender_id: string
            receiver_id: string
            text: string
        }
        // FIX: Added missing Update property
        Update: {
            sender_id?: string
            receiver_id?: string
            text?: string
        }
        // FIX: Added missing Relationships property to ensure proper type inference.
        Relationships: []
      }
      transactions: {
        Row: {
            id: number
            from_user_id: string | null
            to_user_id: string
            amount: number
            type: string
            created_at: string
        }
        Insert: {
            from_user_id?: string | null
            to_user_id: string
            amount: number
            type: string
        }
        // FIX: Added missing Update property
        Update: {
            from_user_id?: string | null
            to_user_id?: string
            amount?: number
            type?: string
        }
        // FIX: Added missing Relationships property to ensure proper type inference.
        Relationships: []
      }
      coin_requests: {
        Row: {
            id: string // Changed to string to match app logic
            from_user_id: string
            to_user_id: string
            amount: number
            status: string
            created_at: string
        }
        Insert: {
            id: string
            from_user_id: string
            to_user_id: string
            amount: number
            status: string
        }
        Update: {
            status?: string
        }
        // FIX: Added missing Relationships property to ensure proper type inference.
        Relationships: []
      }
    }
    Views: {
      [key: string]: never
    }
    Functions: {
      place_bet: {
        Args: {
          p_fight_id: number
          p_choice: string
          p_amount: number
        }
        // FIX: Changed return type to `undefined`. RPC functions that don't return a value
        // must use `undefined` for correct Supabase type inference.
        Returns: undefined
      }
    }
    Enums: {
      [key: string]: never
    }
    CompositeTypes: {
      [key: string]: never
    }
  }
}